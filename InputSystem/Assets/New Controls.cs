//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/New Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls"",
    ""maps"": [
        {
            ""name"": ""KeyBoardMap"",
            ""id"": ""c504ecc8-555c-44f1-b2b2-2d63e0a1b481"",
            ""actions"": [
                {
                    ""name"": ""MoveXY"",
                    ""type"": ""Value"",
                    ""id"": ""5b3c1e31-2373-4e84-b607-0705154aa83b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""457b59a7-7e6a-4381-9c49-fa094b70c45a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""7bcd3b6f-9995-4f0c-beb3-73d57337a9ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""591409c2-055b-4957-89f7-a8fcf5b2b3fe"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveXY"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7fe800ec-a35f-4366-8871-f63e44461755"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K+M"",
                    ""action"": ""MoveXY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1a5d8238-e094-46dd-94c1-b5c667a46604"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K+M"",
                    ""action"": ""MoveXY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6dd46463-914c-4209-acd0-6226768354ce"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K+M"",
                    ""action"": ""MoveXY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ec2263bc-3404-4012-9982-16982e742cb5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K+M"",
                    ""action"": ""MoveXY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""30887d20-14df-4305-81ab-1d201ad56901"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K+M"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27fa710a-dc39-4384-a2aa-903d5625b5d2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K+M"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GamepadMap"",
            ""id"": ""2b4dbd2d-3fd4-467b-b5a8-3e6b38d59990"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""1af8c611-20e6-4feb-b0d6-09caf4a09776"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""64867f23-4374-4c61-97a0-620b5bb8b38b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""6013c1a1-8b55-4bcb-80e8-e47e9ac1b852"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7df33789-a254-44e6-ab19-94dc607a471f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K+M"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1632245d-e4b9-4b72-80e1-b5a95e759803"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62c8ed25-4c4d-467a-8b12-9647f682dd5d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""162ceaac-4115-4122-b127-ff6c147d8d74"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc9f51e3-c6c6-46f4-ade7-568b8c5532ef"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""K+M"",
            ""bindingGroup"": ""K+M"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<DualShockGamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // KeyBoardMap
        m_KeyBoardMap = asset.FindActionMap("KeyBoardMap", throwIfNotFound: true);
        m_KeyBoardMap_MoveXY = m_KeyBoardMap.FindAction("MoveXY", throwIfNotFound: true);
        m_KeyBoardMap_MousePosition = m_KeyBoardMap.FindAction("MousePosition", throwIfNotFound: true);
        m_KeyBoardMap_Shoot = m_KeyBoardMap.FindAction("Shoot", throwIfNotFound: true);
        // GamepadMap
        m_GamepadMap = asset.FindActionMap("GamepadMap", throwIfNotFound: true);
        m_GamepadMap_Movement = m_GamepadMap.FindAction("Movement", throwIfNotFound: true);
        m_GamepadMap_Rotation = m_GamepadMap.FindAction("Rotation", throwIfNotFound: true);
        m_GamepadMap_Shoot = m_GamepadMap.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KeyBoardMap
    private readonly InputActionMap m_KeyBoardMap;
    private List<IKeyBoardMapActions> m_KeyBoardMapActionsCallbackInterfaces = new List<IKeyBoardMapActions>();
    private readonly InputAction m_KeyBoardMap_MoveXY;
    private readonly InputAction m_KeyBoardMap_MousePosition;
    private readonly InputAction m_KeyBoardMap_Shoot;
    public struct KeyBoardMapActions
    {
        private @NewControls m_Wrapper;
        public KeyBoardMapActions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveXY => m_Wrapper.m_KeyBoardMap_MoveXY;
        public InputAction @MousePosition => m_Wrapper.m_KeyBoardMap_MousePosition;
        public InputAction @Shoot => m_Wrapper.m_KeyBoardMap_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_KeyBoardMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyBoardMapActions set) { return set.Get(); }
        public void AddCallbacks(IKeyBoardMapActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyBoardMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyBoardMapActionsCallbackInterfaces.Add(instance);
            @MoveXY.started += instance.OnMoveXY;
            @MoveXY.performed += instance.OnMoveXY;
            @MoveXY.canceled += instance.OnMoveXY;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IKeyBoardMapActions instance)
        {
            @MoveXY.started -= instance.OnMoveXY;
            @MoveXY.performed -= instance.OnMoveXY;
            @MoveXY.canceled -= instance.OnMoveXY;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IKeyBoardMapActions instance)
        {
            if (m_Wrapper.m_KeyBoardMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyBoardMapActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyBoardMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyBoardMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyBoardMapActions @KeyBoardMap => new KeyBoardMapActions(this);

    // GamepadMap
    private readonly InputActionMap m_GamepadMap;
    private List<IGamepadMapActions> m_GamepadMapActionsCallbackInterfaces = new List<IGamepadMapActions>();
    private readonly InputAction m_GamepadMap_Movement;
    private readonly InputAction m_GamepadMap_Rotation;
    private readonly InputAction m_GamepadMap_Shoot;
    public struct GamepadMapActions
    {
        private @NewControls m_Wrapper;
        public GamepadMapActions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_GamepadMap_Movement;
        public InputAction @Rotation => m_Wrapper.m_GamepadMap_Rotation;
        public InputAction @Shoot => m_Wrapper.m_GamepadMap_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_GamepadMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamepadMapActions set) { return set.Get(); }
        public void AddCallbacks(IGamepadMapActions instance)
        {
            if (instance == null || m_Wrapper.m_GamepadMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GamepadMapActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IGamepadMapActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IGamepadMapActions instance)
        {
            if (m_Wrapper.m_GamepadMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGamepadMapActions instance)
        {
            foreach (var item in m_Wrapper.m_GamepadMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GamepadMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GamepadMapActions @GamepadMap => new GamepadMapActions(this);
    private int m_KMSchemeIndex = -1;
    public InputControlScheme KMScheme
    {
        get
        {
            if (m_KMSchemeIndex == -1) m_KMSchemeIndex = asset.FindControlSchemeIndex("K+M");
            return asset.controlSchemes[m_KMSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IKeyBoardMapActions
    {
        void OnMoveXY(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
    public interface IGamepadMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
